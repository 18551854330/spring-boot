<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">

    <!--

          本 POM为标准的 Module POM ，其他新建 Module在此基础上修改

          增加引入本 Module jar
        <dependency>
            <groupId>org.h819.main</groupId>
            <artifactId>main</artifactId>
            <version>publish-1.0</version>
        </dependency>
    -->

    <!--
   参考 spring side4项目，做了改动，不要照搬
-->

    <parent>
        <groupId>org.h819</groupId>
        <artifactId>parent</artifactId>
        <version>1.0</version>
        <relativePath>../pom.xml</relativePath>
    </parent>

    <modelVersion>4.0.0</modelVersion>
    <groupId>org.h819</groupId>
    <artifactId>main</artifactId>
    <name>h819-main</name>
    <!-- 利用 maven-assembly-plugin 打包，代替默认打包命令-->
    <packaging>pom</packaging>
    <version>1.0</version>


    <dependencies>

         <!-- spring begin =========================================================== -->
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-core</artifactId>
            <version>${spring.version}</version>
        </dependency>
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-beans</artifactId>
            <version>${spring.version}</version>
        </dependency>

        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-context</artifactId>
            <version>${spring.version}</version>
        </dependency>

        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-context-support</artifactId>
            <version>${spring.version}</version>
        </dependency>

        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-orm</artifactId>
            <version>${spring.version}</version>
        </dependency>

        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-tx</artifactId>
            <version>${spring.version}</version>
        </dependency>

        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-jdbc</artifactId>
            <version>${spring.version}</version>
        </dependency>

        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-web</artifactId>
            <version>${spring.version}</version>
        </dependency>

        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-webmvc</artifactId>
            <version>${spring.version}</version>
        </dependency>

        <dependency>
            <groupId>org.springframework.data</groupId>
            <artifactId>spring-data-jpa</artifactId>
            <version>${spring-data-jpa.version}</version>
        </dependency>


        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-test</artifactId>
            <version>${spring.version}</version>
            <scope>test</scope>
        </dependency>


        <!-- spring end -->

        <!-- TEST begin ，仅 运行 测试用例是需要-->
        <!-- TEST begin =========================================================== -->

        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <version>${junit.version}</version>
            <scope>test</scope>
        </dependency>

        <dependency>
            <groupId>org.assertj</groupId>
            <artifactId>assertj-core</artifactId>
            <version>${assertj.version}</version>
            <scope>test</scope>
        </dependency>

        <dependency>
            <groupId>org.mockito</groupId>
            <artifactId>mockito-core</artifactId>
            <version>${mockito.version}</version>
            <scope>test</scope>
        </dependency>
        <!-- TEST end-->

        <!-- hibernate begin =========================================================== -->
        <dependency>
            <groupId>org.hibernate</groupId>
            <artifactId>hibernate-entitymanager</artifactId>
            <version>${hibernate.version}</version>
        </dependency>
        <!-- JSR303 BeanValidator -->
        <dependency>
            <groupId>org.hibernate</groupId>
            <artifactId>hibernate-validator</artifactId>
            <version>${hibernate-validator.version}</version>
        </dependency>
        <!-- hibernate end -->


        <!-- JSON begin =========================================================== -->

        <dependency>
            <groupId>com.alibaba</groupId>
            <artifactId>fastjson</artifactId>
            <version>1.1.43</version>
        </dependency>

        <!-- jackson annotations 用到，在 Entity 中格式化 Data-->
        <dependency>
            <groupId>com.fasterxml.jackson.module</groupId>
            <artifactId>jackson-module-jaxb-annotations</artifactId>
            <version>${jackson.version}</version>
        </dependency>


        <!-- JSON end -->

        <!-- LOGGING begin =========================================================== -->
        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>slf4j-api</artifactId>
            <version>${slf4j.version}</version>
        </dependency>

        <dependency>
            <groupId>ch.qos.logback</groupId>
            <artifactId>logback-classic</artifactId>
            <version>${logback.version}</version>
            <scope>runtime</scope>
        </dependency>

        <!-- 代码直接调用log4j会被桥接到slf4j -->
        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>log4j-over-slf4j</artifactId>
            <version>${slf4j.version}</version>
            <scope>runtime</scope>
        </dependency>
        <!-- 代码直接调用common-logging会被桥接到slf4j -->
        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>jcl-over-slf4j</artifactId>
            <version>${slf4j.version}</version>
            <scope>runtime</scope>
        </dependency>
        <!-- 代码直接调用java.util.logging会被桥接到slf4j -->
        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>jul-to-slf4j</artifactId>
            <version>${slf4j.version}</version>
            <scope>runtime</scope>
        </dependency>

        <dependency>


            <groupId>com.googlecode.log4jdbc</groupId>
            <artifactId>log4jdbc</artifactId>
            <version>1.2</version>
            <scope>runtime</scope>
        </dependency>
        <!-- LOGGING end -->

        <!-- database begin =========================================================== -->
        <!-- connection pool 仅项目运行时需要-->
        <!-- Tomcat(7,8 版本以上) 连接池，长连接 oracle 下面经常退出，弃用-->
        <dependency>
            <groupId>com.alibaba</groupId>
            <artifactId>druid</artifactId>
            <version>${druid-jdbc.version}</version>
            <scope>runtime</scope>
        </dependency>


        <!-- jdbc driver 仅项目运行时需要-->
        <dependency>
            <groupId>mysql</groupId>
            <artifactId>mysql-connector-java</artifactId>
            <version>${mysql.jdbc.driver.version}</version>
            <scope>runtime</scope>
        </dependency>

        <dependency>
            <!-- oracle 8i: spring 无法连接，用 commons dbutils , oracle-connector-java-9.0.2.0.0-for-jdk1.4 -->
            <groupId>oracle</groupId>
            <artifactId>oracle-connector-java</artifactId>
            <!--oracle 9i 用 12c 驱动，有问题，查询的数据为空白，改为用 10g-->
            <version>${oracle.version.10g}</version>
            <!--存储过程编码用到了此类库，故不能 runtime
            <scope>runtime</scope>-->
        </dependency>
        <!-- database end -->


        <!--web begin -->
        <!-- servlet-api，jsp-api tomcat 已经提供，发布时候不需要，否则在 tomcat 下部署会出错 =========================================================== -->
        <dependency>
            <groupId>javax.servlet</groupId>
            <artifactId>javax.servlet-api</artifactId>
            <version>${javax.servlet-api.version}</version>
            <scope>provided</scope>
        </dependency>

        <dependency>
            <groupId>javax.servlet.jsp</groupId>
            <artifactId>jsp-api</artifactId>
            <version>2.1</version>
            <scope>provided</scope>
        </dependency>

        <dependency>
            <groupId>javax.servlet</groupId>
            <artifactId>jstl</artifactId>
            <version>${javax.servlet.jstl.version}</version>
        </dependency>

        <dependency>
            <groupId>opensymphony</groupId>
            <artifactId>sitemesh</artifactId>
            <version>${sitemesh.version}</version>
            <scope>runtime</scope>
        </dependency>

        <!-- web server -->
        <dependency>
            <groupId>org.eclipse.jetty</groupId>
            <artifactId>jetty-server</artifactId>
            <version>${jetty.version}</version>
            <scope>test</scope>
        </dependency>

        <dependency>
            <groupId>org.eclipse.jetty</groupId>
            <artifactId>jetty-webapp</artifactId>
            <version>${jetty.version}</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.eclipse.jetty</groupId>
            <artifactId>jetty-jsp</artifactId>
            <version>${jetty.version}</version>
            <scope>test</scope>
        </dependency>
        <!-- WEB end -->

        <!-- shiro begin -->
        <dependency>
            <groupId>org.apache.shiro</groupId>
            <artifactId>shiro-core</artifactId>
            <version>${apache.shiro.version}</version>
        </dependency>
        <dependency>
            <groupId>org.apache.shiro</groupId>
            <artifactId>shiro-ehcache</artifactId>
            <version>${apache.shiro.version}</version>
        </dependency>
        <dependency>
            <groupId>org.apache.shiro</groupId>
            <artifactId>shiro-web</artifactId>
            <version>${apache.shiro.version}</version>
        </dependency>
        <dependency>
            <groupId>org.apache.shiro</groupId>
            <artifactId>shiro-quartz</artifactId>
            <version>${apache.shiro.version}</version>
        </dependency>
        <dependency>
            <groupId>org.apache.shiro</groupId>
            <artifactId>shiro-spring</artifactId>
            <version>${apache.shiro.version}</version>
        </dependency>
        <!-- shiro end -->


        <!-- apache  =========================================================== -->
        <!-- 不知道不同的组件，  groupId 为什么不一样-->
        <dependency>
            <groupId>org.apache.commons</groupId>
            <artifactId>commons-lang3</artifactId>
            <version>${commons-lang3.version}</version>
        </dependency>

        <dependency>
            <groupId>org.apache.commons</groupId>
            <artifactId>commons-compress</artifactId>
            <version>${commons-compress.version}</version>
        </dependency>

        <dependency>
            <groupId>commons-io</groupId>
            <artifactId>commons-io</artifactId>
            <version>${commons-io.version}</version>
        </dependency>

        <dependency>
            <groupId>commons-configuration</groupId>
            <artifactId>commons-configuration</artifactId>
            <version>${commons-configuration.version}</version>
        </dependency>

        <dependency>
            <groupId>org.apache.commons</groupId>
            <artifactId>commons-collections4</artifactId>
            <version>${commons-collections4.version}</version>
        </dependency>

        <dependency>
            <groupId>commons-beanutils</groupId>
            <artifactId>commons-beanutils</artifactId>
            <version>${commons-beanutils.version}</version>
        </dependency>

        <dependency>
            <groupId>commons-net</groupId>
            <artifactId>commons-net</artifactId>
            <version>${commons-net.version}</version>
        </dependency>

       <!-- sftp lib-->
        <dependency>
            <groupId>com.jcraft</groupId>
            <artifactId>jsch</artifactId>
            <version>0.1.52</version>
        </dependency>

        <dependency>
            <groupId>org.apache.commons</groupId>
            <artifactId>commons-email</artifactId>
            <version>${commons-email.version}</version>
        </dependency>

        <dependency>
            <groupId>commons-codec</groupId>
            <artifactId>commons-codec</artifactId>
            <version>${commons-codec.version}</version>
        </dependency>

        <dependency>
            <groupId>org.apache.commons</groupId>
            <artifactId>commons-csv</artifactId>
            <version>1.1</version>
        </dependency>


        <dependency>
            <groupId>commons-cli</groupId>
            <artifactId>commons-cli</artifactId>
            <version>1.2</version>
        </dependency>

        <dependency>
            <groupId>org.apache.commons</groupId>
            <artifactId>commons-exec</artifactId>
            <version>1.3</version>
        </dependency>



        <!-- apache  end =========================================================== -->


        <!--poi -->
        <dependency>
            <groupId>org.apache.poi</groupId>
            <artifactId>poi</artifactId>
            <version>${apache.poi.version}</version>
        </dependency>
        <dependency>
            <groupId>org.apache.poi</groupId>
            <artifactId>poi-ooxml</artifactId>
            <version>${apache.poi.ooxml.version}</version>
        </dependency>
        <dependency>
            <groupId>org.apache.poi</groupId>
            <artifactId>poi-ooxml-schemas</artifactId>
            <version>${apache.poi.ooxml.schemas.version}</version>
        </dependency>

        <!-- com.google.guava spring side org.h819.web.spring.jpa.dynamicsearch.SearchFilter.java 用到-->
        <dependency>
            <groupId>com.google.guava</groupId>
            <artifactId>guava</artifactId>
            <version>${guava.version}</version>
        </dependency>


        <!-- itext pdf -->
        <dependency>
            <groupId>com.itextpdf</groupId>
            <artifactId>itextpdf</artifactId>
            <version>${com.itextpdf.itextpdf.version}</version>
        </dependency>
        <dependency>
            <groupId>org.bouncycastle</groupId>
            <artifactId>bcpkix-jdk15on</artifactId>
            <version>${org.bouncycastle.bcprov-jdk15on.version}</version>
        </dependency>

        <dependency>
            <groupId>org.bouncycastle</groupId>
            <artifactId>bcprov-jdk15on</artifactId>
            <version>${org.bouncycastle.bcpkix-jdk15on.version}</version>
        </dependency>
        <!-- itext pdf end-->


        <!--日后用 jdk 代替 =========================================================== -->
        <dependency>
            <groupId>joda-time</groupId>
            <artifactId>joda-time</artifactId>
            <version>2.3</version>
        </dependency>

        <!-- HTML parser =========================================================== -->
        <dependency>
            <!-- jsoup HTML parser library @ http://jsoup.org/ -->
            <groupId>org.jsoup</groupId>
            <artifactId>jsoup</artifactId>
            <version>${org.jsoup.version}</version>
        </dependency>

        <!-- 解析文件内容，判断 mime type 等功能 =========================================================== -->
        <dependency>
            <groupId>org.apache.tika</groupId>
            <artifactId>tika-core</artifactId>
            <version>${apache.tika.core.version}</version>
        </dependency>
        <!-- 判断文件的编码 CharSet
         https://code.google.com/p/juniversalchardet/
         that is the encoding detector library of Mozilla.
        =========================================================== -->
        <dependency>
            <groupId>com.googlecode.juniversalchardet</groupId>
            <artifactId>juniversalchardet</artifactId>
            <version>1.0.3</version>
        </dependency>
        <!-- 微信开发包 -公众号
          https://github.com/chanjarster/weixin-java-tools
         =========================================================== -->
        <dependency>
            <groupId>me.chanjar</groupId>
            <artifactId>weixin-java-mp</artifactId>
            <version>1.1.1</version>
        </dependency>
        <!-- java 中，只有实现了 Cloneable interface 的对象才能 clone ，本插件则不必实现
       https://code.google.com/p/cloning/
       The cloning library is a small, open source (Apache licensed) Java library which deep-clones objects.
       The objects don't have to implement the Cloneable interface. Effectively, this library can clone ANY Java object.
       It can be used i.e. in cache implementations if you don't want the cached object to be modified or
       whenever you want to create a deep copy of objects.
       =========================================================== -->
        <dependency>
            <groupId>uk.com.robust-it</groupId>
            <artifactId>cloning</artifactId>
            <version>1.9.1</version>
        </dependency>


        <dependency>
            <groupId>com.sun.mail</groupId>
            <artifactId>javax.mail</artifactId>
            <version>${java.mail}</version>
        </dependency>

        <dependency>
            <groupId>org.apache.velocity</groupId>
            <artifactId>velocity</artifactId>
            <version>${apache.velocity.version}</version>
        </dependency>

        <dependency>
            <groupId>org.apache.velocity</groupId>
            <artifactId>velocity-tools</artifactId>
            <version>2.0</version>
        </dependency>


        <!-- 二维码开发包 https://github.com/zxing/zxing/ -->
        <dependency>
            <groupId>com.google.zxing</groupId>
            <artifactId>core</artifactId>
            <version>${com.google.zxing.version}</version>
        </dependency>
        <dependency>
            <groupId>com.google.zxing</groupId>
            <artifactId>javase</artifactId>
            <version>${com.google.zxing.version}</version>
        </dependency>

        <!-- 验证邮件地址用到 ，同时用到了 commons.net-->
        <dependency>
            <groupId>dnsjava</groupId>
            <artifactId>dnsjava</artifactId>
            <version>${dnsjava.version}</version>
        </dependency>

        <dependency>
            <groupId>org.apache.httpcomponents</groupId>
            <artifactId>httpclient</artifactId>
            <version>4.5.1</version>
        </dependency>

    </dependencies>
    <build>
        <!--生成的 jar 的文件名-->
        <finalName>h819 main</finalName>
        <plugins>


            <!--打包插件-->
            <!--
        执行步骤:
        1.  设置项目打包类型为 pom :    <packaging>pom</packaging>
        2.  执行 jar 命令，会生成包含所有类的 jar 包(临时包，运行 compile 命令时，会检验此 jar 包是否存在，存在之后，在生成新的包代替)
        3.  执行 package (compile ? )命令，会按照 assembly 的设置生成 jar 包，代替原来的包，并部署到本地库


            -->
            <!--
            参考 ：
            https://maven.apache.org/plugins/maven-assembly-plugin/single-mojo.html
            https://maven.apache.org/plugins/maven-assembly-plugin/assembly.html

            zip | tar | tar.gz | tar.bz2 | jar | dir | war | and any other format that the ArchiveManager has been configured for

              -->

            <plugin>
                <artifactId>maven-assembly-plugin</artifactId>
                <version>${maven-assembly-plugin.version}</version>
                <!--引入依赖
                <dependencies>
                    <dependency>
                        <groupId>org.h819.assembly</groupId>
                        <artifactId>org.h819.assembly</artifactId>
                        <version>1.0-SNAPSHOT</version>
                    </dependency>
                </dependencies>
                 -->

                <executions>
                    <!--定义多个 execution ，可以调用多个 assembly 配置文件。assembly 配置文件中可以定义多种格式包-->
                    <execution>  <!--执行器 mvn assembly:assembly-->
                        <id>make-assembly</id>
                        <!--名字任意 -->
                        <phase>package</phase>
                        <!-- 绑定到package生命周期阶段上，执行插件命令之前 运行 package -->
                        <goals>
                            <goal>single</goal>
                            <!--  执行 assembly:single 命令，assembly 插件推荐只运行 single 命令-->
                        </goals>
                        <configuration>
                            <!-- This is where we use our shared assembly descriptor
                            <descriptorRefs>
                                <descriptorRef>jar-h819</descriptorRef>
                            </descriptorRefs>
                            -->
                            <appendAssemblyId>false</appendAssemblyId>
                            <!--定义打包文件的基本起始目录，和 assembly 配置文件中 directory 属性联合确定打包文件的起始目录-->
                            <archiveBaseDirectory>${project.build.directory}/classes</archiveBaseDirectory>
                            <!--可执行 jar，指定 mainClass
                            <archive>
                                <manifest>
                                    <mainClass>org.sample.App</mainClass>
                                </manifest>
                            </archive>
                            -->
                            <descriptors>
                                <descriptor>src/main/resources/assemblies/jar-h819.xml</descriptor>
                            </descriptors>
                        </configuration>
                    </execution>
                </executions>
            </plugin>

            <!-- 代替默认的 install 命令
                 默认的 install 命令发布的包，其他 Module 引用会有问题-->

            <!--
                运行 install 和 pakage 命令，均会运行如下配置的 install 命令
            -->

            <plugin>
                <artifactId>maven-install-plugin</artifactId>
                <version>${maven-install-plugin.version}</version>
                <inherited>false</inherited>
                <executions>

                    <!--
                      <execution>
                          <id>install-artifacts.1</id>
                          <goals>
                              <goal>install-file</goal>
                          </goals>
                          <phase>validate</phase>
                          <configuration>
                              <file>D:\download\classes12.jar</file>
                              <groupId>oracle</groupId>
                              <artifactId>oracle-connector-java</artifactId>
                              <packaging>jar</packaging>
                              <version>9.0.2.0.0-for-jdk1.3</version>
                          </configuration>
                      </execution>
                     -->

                    <!-- spring side4 项目，4.2.2 版本，由 Module 直接安装到本地库，不成功，在这里手工安装-->
                    <!--
                     <execution>
                         <id>install-artifacts.2</id>
                         <goals>
                             <goal>install-file</goal>
                         </goals>
                         <phase>validate</phase>
                         <configuration>
                             <file>E:\program\IntelliJ IDEA Project\springside4-master\modules\core\target\springside-core-4.2.2.GA.jar
                             </file>
                             <groupId>org.springside</groupId>
                             <artifactId>springside-core</artifactId>
                             <packaging>jar</packaging>
                             <version>4.2.2.GA</version>
                         </configuration>
                     </execution>
                    -->
                    <!---->
                    <execution>
                        <id>install-artifacts.4</id>
                        <goals>
                            <goal>install-file</goal>
                        </goals>
                        <phase>validate</phase>
                        <configuration>

                            <file>${project.build.directory}/h819 main.jar</file>
                            <packaging>jar</packaging>
                            <groupId>org.h819.main</groupId>
                            <artifactId>main</artifactId>
                            <version>publish-1.0.11</version>
                        </configuration>
                    </execution>
                </executions>
            </plugin>

        </plugins>
    </build>
</project>
