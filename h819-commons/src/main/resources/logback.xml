<?xml version="1.0" encoding="UTF-8"?>
<configuration>

    <contextName>myAppName</contextName>


    <!-- 定义一个参数  -->
    <!-- 定义 roolingFile 的输出目录，如果不定义 , 会输出到 tomcat 启动命令的同级目录下 -->
    <!-- linux
    <property name="APP_HOME" value="/usr/local/apache-tomcat-8.0.5/logs" />
     -->
    <!-- windows     -->
    <property name="APP_HOME" value="logs"/>
    <property name="PROJECT_NAME" value="info_snatch"/>

    <!-- appender ： 输出类型定义-->
    <appender name="console" class="ch.qos.logback.core.ConsoleAppender">
        <encoder>
            <pattern>%d{HH:mm:ss.SSS} %-5level %caller{1} - %msg%n</pattern>
        </encoder>
    </appender>

    <!-- 输出到文件：注意设置文件名称
    <appender name="rollingFile" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <file>${APP_HOME}/${PROJECT_NAME}.txt</file>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <fileNamePattern>${APP_HOME}/${PROJECT_NAME}-%d{yyyy-MM-dd}.%i.txt</fileNamePattern>
            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <maxFileSize>50MB</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>
            <maxHistory>60</maxHistory>
        </rollingPolicy>
        <encoder>
            <pattern>%d{HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n</pattern>
        </encoder>
    </appender>
    -->
    <!--使用之前，数据库表必须存在，参见 http://logback.qos.ch/manual/appenders.html
        测试的时候，可以去掉，否则每次启动程序都会进行连接

            c3p0 设置
             <dataSource class="com.mchange.v2.c3p0.ComboPooledDataSource">
                 <driverClassName>com.mysql.jdbc.Driver</driverClassName>
                 <jdbcUrl>jdbc:mysql://129.9.100.16:3306/myproject?useUnicode=true&amp;characterEncoding=utf-8</jdbcUrl>
                 <user>myproject</user>
                 <password>myproject</password>
             </dataSource>

    <appender name="db-classic-mysql-pool" class="ch.qos.logback.classic.db.DBAppender">
        <connectionSource class="ch.qos.logback.core.db.DataSourceConnectionSource">
            <dataSource class="com.alibaba.druid.pool.DruidDataSource">
                <driverClassName>com.mysql.jdbc.Driver</driverClassName>
                <url>jdbc:mysql://129.9.100.16:3306/myproject?useUnicode=true&amp;characterEncoding=utf-8</url>
                <username>myproject</username>
                <password>myproject</password>
                <initialSize>1</initialSize>
                <minIdle>1</minIdle>
                <maxActive>2</maxActive>
                <maxWait>60000</maxWait>
                <timeBetweenEvictionRunsMillis>60000</timeBetweenEvictionRunsMillis>
                <minEvictableIdleTimeMillis>300000</minEvictableIdleTimeMillis>

                <validationQuery>SELECT 1</validationQuery>
                <testWhileIdle>true</testWhileIdle>
                <testOnBorrow>false</testOnBorrow>
                <testOnReturn>false</testOnReturn>
        </connectionSource>
    </appender>
    -->
    <!-- 此处定义 ：一个包或类的日志输出级别(level)及输出介质(appender-ref)

      下面定义的每个 logger ，都会输出，所以此处定义的输出介质( appender-ref )，不必在 root 中再写;
      每个 logger 都会继承 root 定义的日志级别及输出介质，如果此处定义的特定包的 level 和 appender-ref 和 root 重复，则覆盖 root 的相应设置，其他部分按照 root 定义输出
      name : 受此 logger 约束的某一个包或者具体的某一个类
      level : 打印级别(RACE << DEBUG << INFO << WARN << ERROR  (ALL , OFF))，如果未设定，则继承上级包定义的类别
      appender-ref : 输出介质
    -->
    <logger name="org.springframework" level="WARN"/>
    <!-- 公共 jar 定义输出级别，调试期可以设置低一些，便于查看输出信息-->
    <!--log4jdbc -->
    <logger name="jdbc.sqltiming" level="INFO"/>

    <logger name="org.h819" level="INFO"/>
    <logger name="org.examples" level="INFO"/>

    <!-- 输出不同的信息，以 level 区分对操作进行记录。snatch info 项目，对日志进行记录
    不必在 root 中再次定义下面这句，此 logger 已经可以输出。
    <logger name="springapp.jpa.service.snatch.find" level="INFO">
        <appender-ref ref="db-classic-mysql-pool"/>
    </logger>
    <logger name="springapp.jpa.service.snatch" level="ERROR">
        <appender-ref ref="db-classic-mysql-pool"/>
    </logger>
    -->

    <!--
        root : 根 logger 定义 ，为 所有 logger 所继承。

        无 logger 定义的包或类，默认执行此 root 定义的基本和输出

        root 的 level 定义为 WARN ，可以避免输出绝大部分公用 jar 的信息输出，因为这些 jar信息输出大部分为 INFO。系统调试时，可以设置为 INFO ，便于查看输出信息

        root level 可以定义为  TRACE << DEBUG << INFO << WARN << ERROR  (ALL , OFF)

        如果 root level 定义为 INFO, 则上文定义的 <logger ... /> 中，只有 logger 的 level 为 INFO << WARN << ERROR 级别的错误才会输出到 root 指定的输出介质中。

        另外 ， root level 定义为 ALL 则全部输出， OFF 全部关闭 ，无论 logger 如何定义
     -->
    <root level="WARN">
        <appender-ref ref="console"/>
        <!-- 除上文 log 定义的输出外，console 的输出，同时输出到文件和输出到数据库
               <appender-ref ref="rollingFile"/>
               appender-ref ref="db-classic-mysql-pool"/>

		-->
    </root>
</configuration>