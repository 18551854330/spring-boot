<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:util="http://www.springframework.org/schema/util"
       xsi:schemaLocation="
       http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
        http://www.springframework.org/schema/util
        http://www.springframework.org/schema/util/spring-util-4.0.xsd"
       default-lazy-init="true">

<!-- 须自定义配置： 开始 -->
    <!-- 項目自定义的Realm, 所有accountService 依赖的dao 都需要用 depends-on 声明 -->
    <bean id="userRealm" class="org.h819.web.shiro.realm.UserRealm">
        <property name="credentialsMatcher" ref="credentialsMatcher"/>
        <property name="cachingEnabled" value="false"/>
        <!--<property name="authenticationCachingEnabled" value="true"/>-->
        <!--<property name="authenticationCacheName" value="authenticationCache"/>-->
        <!--<property name="authorizationCachingEnabled" value="true"/>-->
        <!--<property name="authorizationCacheName" value="authorizationCache"/>-->
    </bean>

    <!-- 基于Form表单的身份验证过滤器 : 此处可以再添加自己的Filter bean定义 -->
    <!-- 通过 property ，userRealm 中的方法，获得了参数-->
    <bean id="formAuthenticationFilter" class="org.apache.shiro.web.filter.authc.FormAuthenticationFilter">
        <!--
        loginUrl 指定当身份验证时的登录表单
        usernameParam 指定登录表单提交的用户名参数名
        passwordParam 指定登录表单提交的密码参数名
        rememberMeParam  指定登录表单提交的记住密码参数名
        failureKeyAttribute 指定登录失败时的 request属性key（默认shiroLoginFailure）；这样可以在登录表单得到该错误key显示相应的错误消息
        -->
        <property name="usernameParam" value="username"/>
        <property name="passwordParam" value="password"/>
        <property name="rememberMeParam" value="rememberMe"/>
        <!-- 默认的登录页面名称，为 /login.jsp -->
        <property name="loginUrl" value="/login"/>
        <!--
        <property name="failureKeyAttribute" value="shiroLoginFailure"/>
         -->
    </bean>
    <!--
    <bean id="sysUserFilter" class="com.github.zhangkaitao.shiro.chapter16.web.shiro.filter.SysUserFilter"/>
    -->
    <!-- Shiro 的 Web 过滤器 -->

    <bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
        <property name="securityManager" ref="securityManager"/>
        <!-- 默认的登录页面名称，为 /login.jsp -->
        <property name="loginUrl" value="/login"/>
        <!-- 默认的登录成功后跳转页面，为 / -->
        <property name="successUrl" value="/"/>
        <!-- filters 属性用于定义自己的过滤器 -->
        <property name="filters">
            <util:map>
                <entry key="authc" value-ref="formAuthenticationFilter"/>
                <!--
                <entry key="sysUser" value-ref="sysUserFilter"/>
                -->
            </util:map>
        </property>
        <!-- filterChainDefinitions 用于声明 url 和 filter 的关系 -->
        <property name="filterChainDefinitions">
            <value>
                <!--
                url模式使用Ant风格模式
                Ant路径通配符支持?、*、**，注意通配符匹配不包括目录分隔符“/”：
                ?：匹配一个字符，如”/admin?”将匹配/admin1，但不匹配/admin或/admin2；
                *：匹配零个或多个字符串，如/admin*将匹配/admin、/admin123，但不匹配/admin/1；
                **：匹配路径中的零个或多个路径，如/admin/**将匹配/admin/a或/admin/a/b。

                url模式匹配顺序是按照在配置中的声明顺序匹配

                格式： url = 验证器   满足此 url ，需满足后面的验证器，多个验证器用逗号隔开
                验证器：
                anon ： 匿名访问（即不需要登录即可访问）
                authc ：基于表单的验证器，需要身份认证通过后才能访问
                logout :退出用户验证，由 Shiro 自行维护

                /role=authc,roles[admin]
                /permission=authc,perms["user:create"]

                /role=roles[admin] ：需要有admin角色授权才能访问
                /permission=perms["user:create"] ： 需要有“user:create”权限才能访问。

                 其他默认拦截器和授权 见笔记
                -->
                /login = authc
                /logout = logout
                /authenticated = authc
                /** = user,sysUser
            </value>
        </property>
    </bean>

    <!-- 须自定义配置： 结束 -->

    <!-- ======================================================================================================= -->

    <!-- 以下配置，不用改变，除非有其他性能要求时 -->

    <!-- 缓存管理器 使用Ehcache实现 -->
    <bean id="shiroEhcacheManager" class="org.apache.shiro.cache.ehcache.EhCacheManager">
        <property name="cacheManagerConfigFile" value="classpath:ehcache/ehcache.xml"/>
    </bean>

    <!-- 凭证匹配器 -->
    <bean id="credentialsMatcher"
          class="org.h819.web.shiro.credentials.RetryLimitHashedCredentialsMatcher">
        <constructor-arg ref="shiroEhcacheManager"/>
        <property name="hashAlgorithmName" value="md5"/>
        <property name="hashIterations" value="2"/>
        <property name="storedCredentialsHexEncoded" value="true"/>
    </bean>

    <!-- 会话ID生成器-->
    <bean id="sessionIdGenerator" class="org.apache.shiro.session.mgt.eis.JavaUuidSessionIdGenerator"/>

    <!-- 会话Cookie模板 : sessionIdCookie是用于生产Session ID Cookie的模板 -->
    <bean id="sessionIdCookie" class="org.apache.shiro.web.servlet.SimpleCookie">
        <constructor-arg value="sid"/>
        <property name="httpOnly" value="true"/>
        <property name="maxAge" value="-1"/>
    </bean>


    <!-- 会话DAO -->
    <bean id="sessionDAO" class="org.apache.shiro.session.mgt.eis.EnterpriseCacheSessionDAO">
        <property name="activeSessionsCacheName" value="shiro-activeSessionCache"/>
        <property name="sessionIdGenerator" ref="sessionIdGenerator"/>
    </bean>

    <!-- 会话验证调度器
     用于定期的验证会话是否已过期，如果过期将停止会话
     使用 Quartz 会话验证调度器，使用时需要导入shiro-quartz依赖
    -->
    <bean id="sessionValidationScheduler" class="org.apache.shiro.session.mgt.quartz.QuartzSessionValidationScheduler">
        <!-- 设置调度时间间隔，单位毫秒，默认就是1小时；-->
        <property name="sessionValidationInterval" value="3600000"/>
        <property name="sessionManager" ref="sessionManager"/>
    </bean>

    <!-- 会话管理器 : 用于web环境的DefaultWebSessionManager
    Shiro提供了三个默认实现：
    DefaultSessionManager：DefaultSecurityManager使用的默认实现，用于JavaSE环境；
    ServletContainerSessionManager：DefaultWebSecurityManager使用的默认实现，用于Web环境，其直接使用Servlet容器的会话；
    DefaultWebSessionManager：用于Web环境的实现，可以替代ServletContainerSessionManager，自己维护着会话，直接废弃了Servlet容器的会话管理。
    -->

    <bean id="sessionManager" class="org.apache.shiro.web.session.mgt.DefaultWebSessionManager">
        <!-- 设置会话的全局过期时间（毫秒为单位），默认30分钟 -->
        <property name="globalSessionTimeout" value="1800000"/>
        <!-- 删除过去会话 -->
        <property name="deleteInvalidSessions" value="true"/>
        <property name="sessionValidationSchedulerEnabled" value="true"/>
        <property name="sessionValidationScheduler" ref="sessionValidationScheduler"/>
        <property name="sessionDAO" ref="sessionDAO"/>
        <property name="sessionIdCookieEnabled" value="true"/>
        <property name="sessionIdCookie" ref="sessionIdCookie"/>
    </bean>

    <bean id="rememberMeCookie" class="org.apache.shiro.web.servlet.SimpleCookie">
        <constructor-arg value="rememberMe"/>
        <property name="httpOnly" value="true"/>
        <!-- 30天 -->
        <property name="maxAge" value="2592000"/>

    </bean>

    <!-- rememberMe管理器 -->
    <bean id="rememberMeManager" class="org.apache.shiro.web.mgt.CookieRememberMeManager">
        <!-- rememberMe cookie加密的密钥 建议每个项目都不一样 默认AES算法 密钥长度（128 256 512 位）-->
        <property name="cipherKey"
                  value="#{T(org.apache.shiro.codec.Base64).decode('4AvVhmFLUs0KTA3Kprsdag==')}"/>
        <property name="cookie" ref="rememberMeCookie"/>
    </bean>

    <!-- 安全管理器 : 用于web环境的DefaultWebSecurityManager-->
    <bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
        <property name="realm" ref="userRealm"/>
        <property name="sessionManager" ref="sessionManager"/>
        <property name="cacheManager" ref="shiroEhcacheManager"/>
        <property name="rememberMeManager" ref="rememberMeManager"/>
    </bean>

    <!-- 相当于调用SecurityUtils.setSecurityManager(securityManager) -->
    <bean class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
        <property name="staticMethod" value="org.apache.shiro.SecurityUtils.setSecurityManager"/>
        <property name="arguments" ref="securityManager"/>
    </bean>

    <!-- Shiro生命周期处理器，保证实现了Shiro内部lifecycle函数的bean执行-->
    <bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor"/>

</beans>